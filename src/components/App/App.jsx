import { useState, useEffect } from "react";
import { Container } from "./App.styled";
import Searchbar from "components/Searchbar";
import ImageGallery from "components/ImageGallery";
import Button from "components/Button";
import Modal from "components/Modal";
import "react-loader-spinner/dist/loader/css/react-spinner-loader.css";
import Loader from "components/Loader";
import ErrorMessage from '../ErrorMessage';
import * as ImageService from '../../service/image-service';

const App = () => {

  const [query, setQuery] = useState('');
  const [ourImages, setOurImages] = useState([]);
  const [page, setPage] = useState(1);
  const [isEmpty, setIsEmpty] = useState(false); // –ø—É—Å—Ç–æ–π –ª–∏ –º–∞—Å—Å–∏–≤ –ø–æ–ª—É—á–∞–µ–º –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ
  const [isVisible, setIsVisible] = useState(false); // –≤–∏–¥–∏–º–æ—Å—Ç—å Button LoadMore
  const [isLoading, setIsLoading] = useState(false); // –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ - —Å–ø–∏–Ω–µ—Ä–∞
  const [error, setError] = useState(null); // —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ - –≤ catch
  const [isModalShown, setIsModalShown] = useState(false); // –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–æ–¥–∞–ª–∫–∏
  const [largeImageURL, setLargeImageURL] = useState(''); // –∫–∞—Ä—Ç–∏–Ω–∫–∞ –¥–ª—è –º–æ–¥–∞–ª–∫–∏


  // –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ query –∏–ª–∏ page –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏—é —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  useEffect(() => {getPhotos(query, page) }, [query, page]);


  // –ø–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏—é —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  const getPhotos = async (query, page) => {
    if(!query){
         return ;
    }
    // –Ω–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏
    setIsLoading(true)

    try {
      const {totalHits, hits}  = await ImageService.getImages(query, page);
      
      if (hits.length === 0) {
        setIsEmpty(true);
        setQuery('');
        return;
      }
          
      setOurImages(prev => [...prev, ...hits])
      setIsVisible(Math.ceil(totalHits/hits.length) > page)
    }
    catch (error) {
      setError(error);
    }
    finally {
      // –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
      setIsLoading(false);
    }
  }


  // –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ query –≤ state (App)
  const onSubmit = (query) => {
      setQuery(query);
      setOurImages([]);
      setPage(1);
      setIsEmpty(false);
      setIsVisible(false);
  }


  // –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è
  const onLoadMoreBtnClick = () => {
    setPage(prev => prev + 1)
  }


  // –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ webformatURL –∑–Ω–∞—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ webformatURL   
  const onImageClick = (e) => {
    const selectedImageSrc = e.target.src;
    const selectedImage = ourImages.find(el => el.webformatURL === selectedImageSrc);
    setLargeImageURL(selectedImage.largeImageURL);
    setIsModalShown(true);
 }

  
  // –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ isModalShown false , –±–ª–∞–≥–æ–¥–∞—Ä—è —á–µ–º—É –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã–≤–∞—Ç—å—Å—è –º–æ–¥–∞–ª–∫–∞
  const onModalClose = () => {
    setIsModalShown(false)
 }

  
    // —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è –æ—à–∏–±–æ–∫
    const EmptyLink="https://www.meme-arsenal.com/memes/6701390fa09401b5b6a3cdb3b90ce39e.jpg";
    const ImageError = "https://static6.depositphotos.com/1026266/543/i/600/depositphotos_5437053-stock-photo-woman-pressing-modern-error-button.jpg";

  
  
    return (
      <Container>        
        <Searchbar onSubmit={onSubmit}> </Searchbar>
        
        {isEmpty && <ErrorMessage text="Sorry. There are no images ... üò≠" link={EmptyLink}></ErrorMessage>}
        
        {error && <ErrorMessage text="‚ùå Something went wrong ..." link={ImageError} ></ErrorMessage>}
        
        <ImageGallery
            onClick={onImageClick}
            images={ourImages}>         
        </ImageGallery>
        
        {isVisible && <Button type ="button" message="Load More" onClick={onLoadMoreBtnClick}></Button>}
        
        {isLoading && <Loader/>}

        {largeImageURL && isModalShown && <Modal onClose={onModalClose} >{largeImageURL}</Modal>}
        
      </Container>
  )
};


export default App;